@model ClaimOrchestrator.Models.Claim

@{
    ViewData["Title"] = $"Claim {Model.ClaimNumber} - {Model.ClaimantName}";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <!-- Header Section -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb mb-2">
                            <li class="breadcrumb-item">
                                <a asp-action="Index" class="text-decoration-none">
                                    <i class="fas fa-clipboard-list me-1"></i>Claims
                                </a>
                            </li>
                            <li class="breadcrumb-item active" aria-current="page">@Model.ClaimNumber</li>
                        </ol>
                    </nav>
                    <h1 class="h2 mb-1 text-gradient">
                        <i class="fas fa-file-alt me-2"></i>Claim Details
                    </h1>
                    <p class="text-muted mb-0">@Model.ClaimNumber - @Model.ClaimantName</p>
                </div>
                <div class="d-flex gap-2">
                    <a asp-action="Index" class="btn btn-outline-secondary glass-effect">
                        <i class="fas fa-arrow-left me-2"></i>Back to Claims
                    </a>
                    <button class="btn btn-outline-primary glass-effect" onclick="window.print()">
                        <i class="fas fa-print me-2"></i>Print
                    </button>
                </div>
            </div>
            
            <!-- Alert Messages -->
            @if (TempData["SuccessMessage"] != null)
            {
                <div class="alert alert-success alert-dismissible fade show glass-effect" role="alert">
                    <i class="fas fa-check-circle me-2"></i>@TempData["SuccessMessage"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            }
            
            @if (TempData["ErrorMessage"] != null)
            {
                <div class="alert alert-danger alert-dismissible fade show glass-effect" role="alert">
                    <i class="fas fa-exclamation-triangle me-2"></i>@TempData["ErrorMessage"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            }
            
            <div class="row">
                <!-- Claim Information -->
                <div class="col-lg-6">
                    <div class="card shadow-sm glass-effect mb-4">
                        <div class="card-header bg-transparent border-bottom">
                            <h5 class="card-title mb-0">
                                <i class="fas fa-info-circle me-2"></i>Claim Information
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="row mb-3">
                                <div class="col-sm-4">
                                    <label class="form-label fw-medium text-muted">Claim Number</label>
                                </div>
                                <div class="col-sm-8">
                                    <span class="fw-bold text-primary">@Model.ClaimNumber</span>
                                </div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-sm-4">
                                    <label class="form-label fw-medium text-muted">Claimant Name</label>
                                </div>
                                <div class="col-sm-8">
                                    <span class="fw-medium">@Model.ClaimantName</span>
                                </div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-sm-4">
                                    <label class="form-label fw-medium text-muted">Address</label>
                                </div>
                                <div class="col-sm-8">
                                    <span>@Model.Address</span>
                                </div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-sm-4">
                                    <label class="form-label fw-medium text-muted">Amount</label>
                                </div>
                                <div class="col-sm-8">
                                    <span class="badge bg-success fs-6">$@Model.Amount.ToString("N2")</span>
                                </div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-sm-4">
                                    <label class="form-label fw-medium text-muted">Status</label>
                                </div>
                                <div class="col-sm-8">
                                    @{
                                        var statusClass = Model.Status switch
                                        {
                                            "Pending" => "bg-warning",
                                            "Validated" => "bg-info",
                                            "Deduplicated" => "bg-primary",
                                            "Eligible" => "bg-success",
                                            "Processed" => "bg-success",
                                            "Failed" => "bg-danger",
                                            _ => "bg-secondary"
                                        };
                                    }
                                    <span class="badge @statusClass fs-6">@Model.Status</span>
                                </div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-sm-4">
                                    <label class="form-label fw-medium text-muted">Created</label>
                                </div>
                                <div class="col-sm-8">
                                    <span>
                                        <i class="fas fa-calendar-day me-1"></i>
                                        @Model.CreatedAt.ToString("MMM dd, yyyy 'at' h:mm tt")
                                    </span>
                                </div>
                            </div>
                            @if (Model.UpdatedAt.HasValue)
                            {
                                <div class="row">
                                    <div class="col-sm-4">
                                        <label class="form-label fw-medium text-muted">Last Updated</label>
                                    </div>
                                    <div class="col-sm-8">
                                        <span>
                                            <i class="fas fa-edit me-1"></i>
                                            @Model.UpdatedAt.Value.ToString("MMM dd, yyyy 'at' h:mm tt")
                                        </span>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                    
                    <!-- Processing Actions -->
                    <div class="card shadow-sm glass-effect">
                        <div class="card-header bg-transparent border-bottom">
                            <h5 class="card-title mb-0">
                                <i class="fas fa-cogs me-2"></i>Processing Actions
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="d-grid gap-3">
                                @if (Model.Status == "Pending")
                                {
                                    <form asp-action="Process" asp-route-id="@Model.Id" method="post">
                                        @Html.AntiForgeryToken()
                                        <button type="submit" class="btn btn-success btn-lg glass-effect" 
                                                onclick="return confirm('Process all steps for this claim?')">
                                            <i class="fas fa-play me-2"></i>Process All Steps
                                        </button>
                                    </form>
                                }
                                
                                <div class="row g-2">
                                    <div class="col-6">
                                        <form asp-action="Validate" asp-route-id="@Model.Id" method="post">
                                            @Html.AntiForgeryToken()
                                            <button type="submit" class="btn btn-outline-info w-100 glass-effect" 
                                                    onclick="return confirm('Validate this claim?')">
                                                <i class="fas fa-check me-2"></i>Validate
                                            </button>
                                        </form>
                                    </div>
                                    <div class="col-6">
                                        <form asp-action="CheckDuplication" asp-route-id="@Model.Id" method="post">
                                            @Html.AntiForgeryToken()
                                            <button type="submit" class="btn btn-outline-primary w-100 glass-effect" 
                                                    onclick="return confirm('Check for duplicates?')">
                                                <i class="fas fa-search me-2"></i>Check Duplicates
                                            </button>
                                        </form>
                                    </div>
                                </div>
                                
                                <form asp-action="CheckEligibility" asp-route-id="@Model.Id" method="post">
                                    @Html.AntiForgeryToken()
                                    <button type="submit" class="btn btn-outline-success glass-effect" 
                                            onclick="return confirm('Check eligibility?')">
                                        <i class="fas fa-thumbs-up me-2"></i>Check Eligibility
                                    </button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Processing Logs -->
                <div class="col-lg-6">
                    <div class="card shadow-sm glass-effect">
                        <div class="card-header bg-transparent border-bottom">
                            <div class="d-flex justify-content-between align-items-center">
                                <h5 class="card-title mb-0">
                                    <i class="fas fa-list-alt me-2"></i>Processing Logs
                                </h5>
                                <span class="badge bg-secondary">@Model.ProcessingLogs.Count() entries</span>
                            </div>
                        </div>
                        <div class="card-body p-0">
                            @if (Model.ProcessingLogs.Any())
                            {
                                <div class="timeline-container" style="max-height: 600px; overflow-y: auto;">
                                    <div class="timeline">
                                        @foreach (var log in Model.ProcessingLogs.OrderByDescending(l => l.Timestamp))
                                        {
                                            <div class="timeline-item">
                                                <div class="timeline-marker">
                                                    @{
                                                        var iconClass = log.Status switch
                                                        {
                                                            "Completed" => "fas fa-check-circle text-success",
                                                            "Failed" => "fas fa-times-circle text-danger",
                                                            "Error" => "fas fa-exclamation-triangle text-warning",
                                                            _ => "fas fa-clock text-muted"
                                                        };
                                                    }
                                                    <i class="@iconClass"></i>
                                                </div>
                                                <div class="timeline-content">
                                                    <div class="d-flex justify-content-between align-items-start mb-2">
                                                        <h6 class="mb-1 fw-medium">@log.StepName</h6>
                                                        <span class="badge @(log.Status == "Completed" ? "bg-success" : log.Status == "Failed" ? "bg-danger" : "bg-warning")">
                                                            @log.Status
                                                        </span>
                                                    </div>
                                                    @if (!string.IsNullOrEmpty(log.Message))
                                                    {
                                                        <p class="text-muted mb-2 small">@log.Message</p>
                                                    }
                                                    <small class="text-muted">
                                                        <i class="fas fa-clock me-1"></i>
                                                        @log.Timestamp.ToString("MMM dd, yyyy 'at' h:mm:ss tt")
                                                    </small>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="text-center py-5">
                                    <i class="fas fa-clipboard-list fa-3x text-muted mb-3"></i>
                                    <h5 class="text-muted mb-2">No processing logs yet</h5>
                                    <p class="text-muted mb-0">Processing logs will appear here once actions are performed.</p>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .timeline {
        position: relative;
        padding: 20px 0;
    }
    
    .timeline-item {
        display: flex;
        margin-bottom: 20px;
        position: relative;
    }
    
    .timeline-marker {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: rgba(13, 110, 253, 0.1);
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 15px;
        flex-shrink: 0;
    }
    
    .timeline-content {
        flex: 1;
        background: rgba(255, 255, 255, 0.7);
        padding: 15px;
        border-radius: 8px;
        border-left: 3px solid #0d6efd;
    }
    
    .timeline-item:not(:last-child)::after {
        content: '';
        position: absolute;
        left: 20px;
        top: 40px;
        bottom: -20px;
        width: 2px;
        background: rgba(13, 110, 253, 0.2);
    }
</style>

@section Scripts {
    <script>
        // Auto-dismiss alerts after 5 seconds
        setTimeout(function() {
            const alerts = document.querySelectorAll('.alert');
            alerts.forEach(alert => {
                const bsAlert = new bootstrap.Alert(alert);
                bsAlert.close();
            });
        }, 5000);
        
        // Add smooth scrolling to timeline
        document.addEventListener('DOMContentLoaded', function() {
            const timelineContainer = document.querySelector('.timeline-container');
            if (timelineContainer) {
                timelineContainer.scrollTop = timelineContainer.scrollHeight;
            }
        });
    </script>
} 
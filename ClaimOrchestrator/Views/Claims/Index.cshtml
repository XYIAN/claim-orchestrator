@model IEnumerable<ClaimOrchestrator.Models.Test>

@{
    ViewData["Title"] = "Test Users Dashboard";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <!-- Header Section -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h1 class="h2 mb-1 text-gradient">
                        <i class="fas fa-users me-2"></i>Test Users Dashboard
                    </h1>
                    <p class="text-muted mb-0">Manage and monitor all test users in the system</p>
                </div>
                <a asp-action="Upload" class="btn btn-primary glass-effect">
                    <i class="fas fa-upload me-2"></i>Upload Test Users
                </a>
            </div>
            
            <!-- Alert Messages -->
            @if (TempData["SuccessMessage"] != null)
            {
                <div class="alert alert-success alert-dismissible fade show glass-effect" role="alert">
                    <i class="fas fa-check-circle me-2"></i>@TempData["SuccessMessage"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            }
            
            @if (TempData["ErrorMessage"] != null)
            {
                <div class="alert alert-danger alert-dismissible fade show glass-effect" role="alert">
                    <i class="fas fa-exclamation-triangle me-2"></i>@TempData["ErrorMessage"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            }
            
            @if (TempData["InfoMessage"] != null)
            {
                <div class="alert alert-info alert-dismissible fade show glass-effect" role="alert">
                    <i class="fas fa-info-circle me-2"></i>@TempData["InfoMessage"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            }
            
            <!-- Statistics Cards -->
            <div class="row mb-4">
                <div class="col-md-3">
                    <div class="stat-card glass-effect text-center p-3">
                        <div class="stat-icon mb-2">
                            <i class="fas fa-users fa-2x text-primary"></i>
                        </div>
                        <h3 class="h4 mb-1">@Model.Count()</h3>
                        <p class="text-muted mb-0">Total Test Users</p>
                    </div>
                </div>
            </div>
            
            <!-- Test Users Table -->
            <div class="card shadow-sm glass-effect">
                <div class="card-header bg-transparent border-bottom">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-table me-2"></i>All Test Users
                        </h5>
                        <div class="d-flex gap-2">
                            <button class="btn btn-outline-secondary btn-sm" onclick="exportToCSV()">
                                <i class="fas fa-download me-1"></i>Export
                            </button>
                            <button class="btn btn-outline-secondary btn-sm" onclick="refreshTable()">
                                <i class="fas fa-sync-alt me-1"></i>Refresh
                            </button>
                        </div>
                    </div>
                </div>
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-hover mb-0" id="testUsersTable">
                            <thead class="table-light">
                                <tr>
                                    <th>
                                        <i class="fas fa-hashtag me-1"></i>ID
                                    </th>
                                    <th>
                                        <i class="fas fa-user me-1"></i>Username
                                    </th>
                                    <th>
                                        <i class="fas fa-key me-1"></i>Password
                                    </th>
                                    <th>
                                        <i class="fas fa-cogs me-1"></i>Actions
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var user in Model)
                                {
                                    <tr class="user-row" data-user-id="@user.Id">
                                        <td>
                                            <strong class="text-primary">@user.Id</strong>
                                        </td>
                                        <td>
                                            <div>
                                                <div class="fw-medium">@user.Username</div>
                                            </div>
                                        </td>
                                        <td>
                                            <small class="text-muted d-block">@user.Password</small>
                                        </td>
                                        <td>
                                            <div class="btn-group btn-group-sm" role="group">
                                                <a asp-action="Details" asp-route-id="@user.Id" 
                                                   class="btn btn-outline-primary" 
                                                   title="View Details">
                                                    <i class="fas fa-eye"></i>
                                                </a>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            
            <!-- Empty State -->
            @if (!Model.Any())
            {
                <div class="text-center py-5">
                    <div class="empty-state glass-effect p-5">
                        <i class="fas fa-inbox fa-4x text-muted mb-4"></i>
                        <h3 class="text-muted mb-3">No test users found</h3>
                        <p class="text-muted mb-4">Get started by uploading some test users to the system.</p>
                        <a asp-action="Upload" class="btn btn-primary btn-lg glass-effect">
                            <i class="fas fa-upload me-2"></i>Upload Test Users
                        </a>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Auto-dismiss alerts after 5 seconds
        setTimeout(function() {
            const alerts = document.querySelectorAll('.alert');
            alerts.forEach(alert => {
                const bsAlert = new bootstrap.Alert(alert);
                bsAlert.close();
            });
        }, 5000);
        
        // Export to CSV functionality
        function exportToCSV() {
            const table = document.getElementById('testUsersTable');
            const rows = table.querySelectorAll('tbody tr');
            let csv = 'ID,Username,Password\n';
            
            rows.forEach(row => {
                const cells = row.querySelectorAll('td');
                const rowData = [
                    cells[0].textContent.trim(),
                    cells[1].textContent.trim(),
                    cells[2].textContent.trim()
                ];
                csv += rowData.map(cell => `"${cell}"`).join(',') + '\n';
            });
            
            const blob = new Blob([csv], { type: 'text/csv' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'test-users-export-' + new Date().toISOString().split('T')[0] + '.csv';
            a.click();
            window.URL.revokeObjectURL(url);
        }
        
        // Refresh table functionality
        function refreshTable() {
            location.reload();
        }
        
        // Add row hover effects
        document.addEventListener('DOMContentLoaded', function() {
            const rows = document.querySelectorAll('.user-row');
            rows.forEach(row => {
                row.addEventListener('mouseenter', function() {
                    this.style.backgroundColor = 'rgba(13, 110, 253, 0.05)';
                });
                row.addEventListener('mouseleave', function() {
                    this.style.backgroundColor = '';
                });
            });
        });
    </script>
}